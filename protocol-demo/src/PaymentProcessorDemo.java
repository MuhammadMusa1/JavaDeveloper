import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class PaymentProcessorDemo {

    // –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    static class PaymentTask implements Runnable {
        private final String transactionId;
        private final double amount;

        public PaymentTask(String transactionId, double amount) {
            this.transactionId = transactionId;
            this.amount = amount;
        }

        @Override
        public void run() {
            System.out.println(Thread.currentThread().getName()
                    + " üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é " + transactionId
                    + " –Ω–∞ —Å—É–º–º—É " + amount + " TJS");
            try {
                Thread.sleep(1000); // –∏–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println(Thread.currentThread().getName()
                    + " ‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é " + transactionId);
        }
    }

    public static void main(String[] args) {
        // –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –Ω–∞ 3 "–±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫–ª–µ—Ä–∫–∞"
        ExecutorService executor = Executors.newFixedThreadPool(3);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
        executor.submit(new PaymentTask("TXN-001", 1000));
        executor.submit(new PaymentTask("TXN-002", 2500));
        executor.submit(new PaymentTask("TXN-003", 500));
        executor.submit(new PaymentTask("TXN-004", 1200));
        executor.submit(new PaymentTask("TXN-005", 800));

        executor.shutdown(); // –∑–∞–ø—Ä–µ—â–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    }
}
